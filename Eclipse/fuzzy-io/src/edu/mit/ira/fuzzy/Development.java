package edu.mit.ira.fuzzy;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

import edu.mit.ira.fuzzy.data.Objective;

/**
 * Development is a collection of Polygons and VoxelArrays, usually generated by
 * FuzzyBuilder.build(SettingGroup) or FuzzyRandom.development()
 *
 * @author Ira Winder
 *
 */
public class Development {
	public ArrayList<Polygon> plotShapes;
	public HashMap<Polygon, String> plotNames;
	public HashMap<Polygon, ArrayList<Polygon>> openShapes;
	public HashMap<Polygon, ArrayList<Polygon>> towerShapes;
	ArrayList<Polygon> allShapes;
	public HashMap<Polygon, VoxelArray> plotSite, plotMassing;
	public VoxelArray site, massing, allVoxels, hollowed;

	public Development() {
		this.plotShapes = new ArrayList<Polygon>();
		this.plotNames = new HashMap<Polygon, String>();
		this.openShapes = new HashMap<Polygon, ArrayList<Polygon>>();
		this.towerShapes = new HashMap<Polygon, ArrayList<Polygon>>();
		this.allShapes = new ArrayList<Polygon>();
		this.plotSite = new HashMap<Polygon, VoxelArray>();
		this.plotMassing = new HashMap<Polygon, VoxelArray>();
		this.site = new VoxelArray();
		this.massing = new VoxelArray();
		this.allVoxels = new VoxelArray();
		this.hollowed = new VoxelArray();
	}

	/**
	 * Generate an array of unique objective performances
	 * @return
	 */
	public ArrayList<Objective> evaluation() {
		
		float siteArea = 0;
		float builtArea = 0;
		float far = 0;
		HashMap<Use, Float> useArea = new HashMap<Use, Float>();
		for(Use use : Use.values()) {
			useArea.put(use, 0f);
		}
		
		ArrayList<Objective> subObjectives = new ArrayList<Objective>();
		for(Polygon plot : plotSite.keySet()) {
			
			VoxelArray pSite = plotSite.get(plot);
			VoxelArray pMassing = plotMassing.get(plot);
			
			float plotSiteArea, plotBuiltArea, plotFAR;
			
			float voxelArea = 0;
			if (pSite.voxelList.size() > 0) {
				voxelArea = (float) Math.pow(pSite.voxelList.get(0).width, 2);
				plotSiteArea = voxelArea * pSite.voxelList.size();
				plotBuiltArea = voxelArea * pMassing.voxelList.size();
				plotFAR = plotBuiltArea / plotSiteArea;
			} else {
				plotSiteArea = 0;
				plotBuiltArea = 0;
				plotFAR = 0;
			}
			
			siteArea += plotSiteArea;
			builtArea += plotBuiltArea;
	
			String plotName = "[" + this.plotNames.get(plot) + "] ";
			subObjectives.add(new Objective(
					plotName + "Site Area", 
					"total area enclosed by " + plotName, 
					plotSiteArea, "sqft"));
			subObjectives.add(new Objective(
					plotName + "Built Area", 
					"total floor area of massing on " + plotName, 
					plotBuiltArea, "sqft"));
			subObjectives.add(new Objective(
					plotName + "Floor Area Ratio", 
					"ratio of built area to site area on " + plotName, 
					plotFAR, "sqft/sqft"));
			
			HashMap<Use, Integer> plotUseCount = new HashMap<Use, Integer>();
			for(Use use : Use.values()) {
				plotUseCount.put(use, 0);
			}
			for(Voxel t : pMassing.voxelList) {
				int count = plotUseCount.get(t.type);
				plotUseCount.put(t.type, count + 1);
			}
			for(Use use : Use.values()) {
				String useName = "[" + use + "] ";
				float plotUseArea = voxelArea * plotUseCount.get(use);
				useArea.put(use, useArea.get(use) + plotUseArea);
				float plotUseRatio;
				if(plotBuiltArea == 0) {
					plotUseRatio = 0;
				} else {
					plotUseRatio = plotUseArea / plotBuiltArea;
				}
				subObjectives.add(new Objective(
						plotName + useName + "Built Area", 
						"total floor area of " + use + "on " + plotName, 
						plotUseArea, "sqft"));
				subObjectives.add(new Objective(
						plotName + useName + "Area Ratio", 
						"portion of total built area on " + plotName, 
						100 * plotUseRatio, "%"));
			}
		}
		
		far = builtArea / siteArea;
		
		ArrayList<Objective> objectives = new ArrayList<Objective>();
		objectives.add(new Objective(
				"Total Site Area", 
				"total area enclosed by site", 
				siteArea, "sqft"));
		objectives.add(new Objective(
				"Total Built Area", 
				"total floor area of massing on site", 
				builtArea, "sqft"));
		objectives.add(new Objective(
				"Floor Area Ratio (FAR)", 
				"ratio of built area to site area", 
				far, "sqft/sqft"));
		
		for(Use use : Use.values()) {
			String useName = "[" + use + "] ";
			float uArea = useArea.get(use);
			float useRatio;
			if(builtArea == 0) {
				useRatio = 0;
			} else {
				useRatio = uArea / builtArea;
			}
			objectives.add(new Objective(
					useName + "Built Area", 
					"total floor area of " + use + "on site", 
					uArea, "sqft"));
			objectives.add(new Objective(
					useName + "Area Ratio", 
					"portion of total " + use + "built area on site", 
					100 * useRatio, "%"));
		}
		
		for(Objective secondary : subObjectives) {
			objectives.add(secondary);
		}
		
		return objectives;
	}
	
	/**
	 * Serialize this development for export
	 * @return
	 */
	public JSONObject serialize() {
		
		JSONArray voxelsJSON = this.hollowed.serialize();
		JSONArray shapesJSON = new JSONArray();
		for (int i = 0; i < this.allShapes.size(); i++) {
			Polygon shape = this.allShapes.get(i);
			shapesJSON.put(i, shape.serialize());
		}
		
		JSONArray objectivesJSON = new JSONArray();
		ArrayList<Objective> objectives = this.evaluation();
	    for(int i=0; i<objectives.size(); i++) {
			Objective objective = objectives.get(i);
			objectivesJSON.put(i, objective.serialize());
		}
		
		JSONObject data = new JSONObject();
		data.put("voxels", voxelsJSON);
		data.put("shapes", shapesJSON);
		data.put("objectives", objectivesJSON);
		return data;
	}
}